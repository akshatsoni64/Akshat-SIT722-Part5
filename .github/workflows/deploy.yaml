# 
# GitHub Actions workflow.
#
# Automatically deploys the Node.js microservice to Kubernetes on push to any branch. 
# For real use you might want to restrict this to the "prod" branch.
#

name: Deploy microservice

on:
  #
  # Deploys the microservice on push to the main branch of this code repository.
  #
  push: 
    branches:
      - main

  #
  # Allows deployment to be invoked manually through the GitHub Actions user interface.
  #
  workflow_dispatch: 

jobs:

  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
    outputs:
      CONTAINER_REGISTRY: steps.get_outputs.env.CONTAINER_REGISTRY
      REGISTRY_UN: steps.get_outputs.env.REGISTRY_UN
      REGISTRY_PW: steps.get_outputs.env.REGISTRY_PW
      KUBE_CONFIG: steps.get_outputs.env.KUBE_CONFIG
      RESOURCE_GROUP: steps.get_outputs.env.RESOURCE_GROUP
      AKS_CLUSTER_NAME: steps.get_outputs.env.AKS_CLUSTER_NAME
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        run: |
          cd ./scripts/terraform
          terraform init
      
      - name: Terraform Apply
        id: apply
        run: |
          cd ./scripts/terraform
          terraform apply -auto-approve

      - name: Get Outputs
        id: get_outputs
        run: |
          echo "CONTAINER_REGISTRY=$(terraform output -raw container_registry_url)" >> $GITHUB_OUTPUT
          echo "REGISTRY_UN=$(terraform output -raw registry_username)" >> $GITHUB_OUTPUT
          echo "REGISTRY_PW=$(terraform output -raw registry_password)" >> $GITHUB_OUTPUT
          echo "KUBE_CONFIG=$(cat ~/.kube/config | base64)" >> $GITHUB_OUTPUT  # Set KUBE_CONFIG
          echo "RESOURCE_GROUP=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "AKS_CLUSTER_NAME=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT

      - name: Set Kubeconfig
        run: |
          az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --admin

  deploy:
    needs: [terraform]
    runs-on: ubuntu-latest
    
    env:
      VERSION: ${{ github.sha }}
      CONTAINER_REGISTRY: ${{ needs.terraform.outputs.CONTAINER_REGISTRY }}  # Use the output from Terraform
      REGISTRY_UN: ${{ needs.terraform.outputs.REGISTRY_UN }}  # Use the output from Terraform
      REGISTRY_PW: ${{ needs.terraform.outputs.REGISTRY_PW }}  # Use the output from Terraform
      KUBE_CONFIG: ${{ needs.terraform.outputs.KUBE_CONFIG }}  # Use the kubeconfig generated

    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v3

      - name: Make build-image.sh executable
        run: chmod +x ./scripts/build-image.sh

      #
      # Builds the Docker image.
      #
      - name: Build
        run: ./scripts/build-image.sh

      - name: Make push-image.sh executable
        run: chmod +x ./scripts/push-image.sh

      #
      # Publishes the Docker image to the container registry.
      #
      - name: Publish
        run: ./scripts/push-image.sh

      - name: Set up Kubectl
        run: |
          echo $KUBE_CONFIG | base64 --decode > ~/.kube/config  # Decode the kubeconfig


      - name: Make deploy.sh executable
        run: chmod +x ./scripts/deploy.sh
      
      #
      # Expands the configuration template and deploys the microservice.
      #
      - name: Deploy
        run: ./scripts/deploy.sh
